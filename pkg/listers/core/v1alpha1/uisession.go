/*
Copyright 2020 The Tilt Dev Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/tilt-dev/tilt/pkg/apis/core/v1alpha1"
)

// UISessionLister helps list UISessions.
// All objects returned here must be treated as read-only.
type UISessionLister interface {
	// List lists all UISessions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UISession, err error)
	// Get retrieves the UISession from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UISession, error)
	UISessionListerExpansion
}

// uISessionLister implements the UISessionLister interface.
type uISessionLister struct {
	indexer cache.Indexer
}

// NewUISessionLister returns a new UISessionLister.
func NewUISessionLister(indexer cache.Indexer) UISessionLister {
	return &uISessionLister{indexer: indexer}
}

// List lists all UISessions in the indexer.
func (s *uISessionLister) List(selector labels.Selector) (ret []*v1alpha1.UISession, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UISession))
	})
	return ret, err
}

// Get retrieves the UISession from the index for a given name.
func (s *uISessionLister) Get(name string) (*v1alpha1.UISession, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uisession"), name)
	}
	return obj.(*v1alpha1.UISession), nil
}
